# -*- po -*-
# Japanese translations for 1.2.1 package.
# Copyright (C) 2009-2011, Brazil, Inc
# This file is distributed under the same license as the groonga package.
# Kouhei Sutou <kou@clear-code.com>, 2011.
#
msgid ""
msgstr ""
"Project-Id-Version: 1.2.1\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2015-06-16 18:33+0900\n"
"Last-Translator: Kouhei Sutou <kou@clear-code.com>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid "Characteristics of Groonga"
msgstr "Groongaの特徴"

msgid "Groonga overview"
msgstr "Groonga の概要"

msgid ""
"Groonga is a fast and accurate full text search engine based on inverted "
"index. One of the characteristics of Groonga is that a newly registered "
"document instantly appears in search results. Also, Groonga allows updates "
"without read locks. These characteristics result in superior performance on "
"real-time applications."
msgstr ""
"Groonga は転置索引を用いた高速・高精度な全文検索エンジンであり、登録された文"
"書をすぐに検索結果に反映できます。また、参照をブロックせずに更新できることか"
"ら、即時更新の必要なアプリケーションにおいても高い性能を発揮します。"

msgid ""
"Groonga is also a column-oriented database management system (DBMS). "
"Compared with well-known row-oriented systems, such as MySQL and PostgreSQL, "
"column-oriented systems are more suited for aggregate queries. Due to this "
"advantage, Groonga can cover weakness of row-oriented systems."
msgstr ""
"全文検索エンジンとして開発された Groonga ですが、独自のカラムストアを持つ列指"
"向のデータベースとしての側面も持っています。そのため、MySQL や PostgreSQL な"
"ど、既存の代表的なデータベースが苦手とする集計クエリを高速に処理できるという"
"特徴があり、組み合わせによって弱点を補うような使い方もできます。"

msgid ""
"The basic functions of Groonga are provided in a C library. Also, libraries "
"for using Groonga in other languages, such as Ruby, are provided by related "
"projects. In addition, groonga-based storage engines are provided for MySQL "
"and PostgreSQL. These libraries and storage engines allow any application to "
"use Groonga. See `usage examples <http://groonga.org/users/>`_."
msgstr ""
"Groonga の基本機能は C ライブラリとして提供されていますが、MySQL や "
"PostgreSQL と連携させたり、Ruby から呼び出したりすることもできます。そのた"
"め、任意のアプリケーションに組み込むことが可能であり、多様な使い方が考えられ"
"ます。 興味のある方は `利用例 <http://groonga.org/ja/users/>`_ をご覧くださ"
"い。"

msgid "Full text search and Instant update"
msgstr "全文検索と即時更新"

msgid ""
"In widely used DBMSs, updates are immediately processed, for example, a "
"newly registered record appears in the result of the next query. In "
"contrast, some full text search engines do not support instant updates, "
"because it is difficult to dynamically update inverted indexes, the "
"underlying data structure."
msgstr ""
"一般的なデータベースにおいては、追加・削除などの操作がすぐに反映されます。一"
"方、全文検索においては、転置索引が逐次更新の難しいデータ構造であることから、"
"文書の追加・削除に対応しないエンジンが少なくありません。"

msgid ""
"Groonga also uses inverted indexes but supports instant updates. In "
"addition, Groonga allows you to search documents even when updating the "
"document collection. Due to these superior characteristics, Groonga is very "
"flexible as a full text search engine. Also, Groonga always shows good "
"performance because it divides a large task, inverted index merging, into "
"smaller tasks."
msgstr ""
"これに対し、転置索引を用いた全文検索エンジンでありながら、Groonga は文書を短"
"時間で追加・削除することができます。その上、更新しながらでも検索できるという"
"優れた特徴を持っているため、全文検索エンジンとしてはとても柔軟性があります。"
"また、複数の転置索引を統合するような重い処理を必要としないので、安定して高い"
"性能を発揮することが期待できます。"

msgid "Column store and aggregate query"
msgstr "カラムストアと集計クエリ"

msgid ""
"People can collect more than enough data in the Internet era. However, it is "
"difficult to extract informative knowledge from a large database, and such a "
"task requires a many-sided analysis through trial and error. For example, "
"search refinement by date, time and location may reveal hidden patterns. "
"Aggregate queries are useful to perform this kind of tasks."
msgstr ""
"現代は、インターネットを情報源とすれば、いくらでも情報を収集できる時代です。"
"しかし、膨大な情報から有益な情報を引き出すのは困難であり、多面的な分析による"
"試行錯誤が必要となります。たとえば、日付や時間帯により絞り込んでみたり、地域"
"により絞り込んでみたり、性別や年齢により絞り込んでみたりすることでしょう。そ"
"して、そのようなときに便利な存在が集計クエリです。"

msgid ""
"An aggregate query groups search results by specified column values and then "
"counts the number of records in each group. For example, an aggregate query "
"in which a location column is specified counts the number of records per "
"location. Making a graph from the result of an aggregate query against a "
"date column is an easy way to visualize changes over time. Also, a "
"combination of refinement by location and an aggregate query against a date "
"column allows visualization of changes over time in specific location. Thus "
"refinement and aggregation are important to perform data mining."
msgstr ""
"集計クエリとは、指定したカラムの値によってレコードをグループ化し、各グループ"
"に含まれるレコードの数を求めるクエリです。たとえば、地域の ID を格納している"
"カラムを指定すれば、地域毎のレコード数が求まります。日付のカラムを指定したと"
"きの出力をグラフ化すれば、レコード数の時間変化を視覚化することができます。さ"
"らに、地域による絞り込みと日付に対する集計クエリを組み合わせれば、特定の地域"
"におけるレコード数の時間変化を視覚化ことも可能です。このように、尺度を自由に"
"選択して絞り込み・集計できることは、膨大な情報を扱う上でとても重要になりま"
"す。"

msgid ""
"A column-oriented architecture allows Groonga to efficiently process "
"aggregate queries because a column-oriented database, which stores records "
"by column, allows an aggregate query to access only a specified column. On "
"the other hand, an aggregate query on a row-oriented database, which stores "
"records by row, has to access neighbor columns, even though those columns "
"are not required."
msgstr ""
"Groonga が集計クエリを高速に処理できる理由は、データベースの論理構造にカラム"
"ストアを採用しているからです。集計クエリが参照するのは指定されたカラムのみで"
"あるため、カラム単位でデータを格納する列指向のデータベースでは、必要なカラム"
"のみを無駄なく読み出せることが利点となります。一方、レコード単位でデータを格"
"納する行指向のデータベースでは、隣接するカラムをまとめて読み出してしまうこと"
"が欠点となります。"

msgid "Inverted index and tokenizer"
msgstr "転置索引とトークナイザ"

msgid ""
"An inverted index is a traditional data structure used for large-scale full "
"text search. A search engine based on inverted index extracts index terms "
"from a document when it is added. Then in retrieval, a query is divided into "
"index terms to find documents containing those index terms. In this way, "
"index terms play an important role in full text search and thus the way of "
"extracting index terms is a key to a better search engine."
msgstr ""
"転置索引は大規模な全文検索に用いられる伝統的なデータ構造です。転置索引を用い"
"た全文検索エンジンでは、文書を追加するときに索引語を記録しておき、検索すると"
"きはクエリを索引語に分割して出現文書を求めます。そのため、文書やクエリから索"
"引語を抜き出す方法が重要になります。"

msgid ""
"A tokenizer is a module to extract index terms. A Japanese full text search "
"engine commonly uses a word-based tokenizer (hereafter referred to as a word "
"tokenizer) and/or a character-based n-gram tokenizer (hereafter referred to "
"as an n-gram tokenizer). A word tokenizer-based search engine is superior in "
"time, space and precision, which is the fraction of relevant documents in a "
"search result. On the other hand, an n-gram tokenizer-based search engine is "
"superior in recall, which is the fraction of retrieved documents in the "
"perfect search result. The best choice depends on the application in "
"practice."
msgstr ""
"トークナイザは、文字列から索引語を抜き出すモジュールです。日本語を対象とする"
"全文検索においては、形態素を索引語として抜き出す方式と文字 N-gram を抜き出す"
"方式のいずれか、あるいは両方を用いるのが一般的です。形態素方式は検索時間や索"
"引サイズの面で優れているほか、検索結果に不要な文書が含まれにくいという利点を"
"持っています。一方、N-gram 方式には検索漏れが発生しにくいという利点があり、状"
"況によって適した方式を選択することが望ましいとされています。"

msgid ""
"Groonga supports both word and n-gram tokenizers. The simplest built-in "
"tokenizer uses spaces as word delimiters. Built-in n-gram tokenizers (n = 1, "
"2, 3) are also available by default. In addition, a yet another built-in "
"word tokenizer is available if MeCab, a part-of-speech and morphological "
"analyzer, is embedded. Note that a tokenizer is pluggable and you can "
"develop your own tokenizer, such as a tokenizer based on another part-of-"
"speech tagger or a named-entity recognizer."
msgstr ""
"Groonga は形態素方式と N-gram 方式の両方に対応しています。初期状態で利用でき"
"るトークナイザは空白を区切り文字として用いる方式と N-gram 方式のみですが、形"
"態素解析器 MeCab を組み込んだときは MeCab による分かち書きの結果を用いる形態"
"素方式が有効になります。トークナイザはプラグインとして追加できるため、特徴的"
"なキーワードのみを索引語として採用するなど、独自のトークナイザを開発すること"
"が可能です。"

msgid "Sharable storage and read lock-free"
msgstr "共有可能なストレージと参照ロックフリー"

msgid ""
"Multi-core processors are mainstream today and the number of cores per "
"processor is increasing. In order to exploit multiple cores, executing "
"multiple queries in parallel or dividing a query into sub-queries for "
"parallel processing is becoming more important."
msgstr ""
"CPU のマルチコア化が進んでいるため、同時に複数のクエリを実行したり、一つのク"
"エリを複数のスレッドで実行したりすることの重要性はますます高まっています。"

msgid ""
"A database of Groonga can be shared with multiple threads/processes. Also, "
"multiple threads/processes can execute read queries in parallel even when "
"another thread/process is executing an update query because Groonga uses "
"read lock-free data structures. This feature is suited to a real-time "
"application that needs to update a database while executing read queries. In "
"addition, Groonga allows you to build flexible systems. For example, a "
"database can receive read queries through the built-in HTTP server of "
"Groonga while accepting update queries through MySQL."
msgstr ""
"Groonga のストレージは、複数のスレッド・プロセスで共有することができます。ま"
"た、参照ロックフリーなデータ構造を採用しているため、更新クエリを実行している"
"状況でも参照クエリを実行することができます。参照クエリを実行できる状態を維持"
"しながら更新クエリを実行できるので、リアルタイムなシステムに適しています。さ"
"らには、MySQL を介して更新クエリを実行している最中に Groonga の HTTP サーバを"
"介して参照クエリを実行するなど、多彩な運用が可能となっています。"

msgid "Geo-location (latitude and longitude) search"
msgstr "位置情報（緯度・経度）検索"

msgid ""
"Location services are getting more convenient because of mobile devices with "
"GPS. For example, if you are going to have lunch or dinner at a nearby "
"restaurant, a local search service for restaurants may be very useful, and "
"for such services, fast geo-location search is becoming more important."
msgstr ""
"GPS に代表される測位システムを搭載した高機能な携帯端末の普及などによって、位"
"置情報を扱うサービスはますます便利になっています。たとえば、近くにあるレスト"
"ランを探しているときは、現在地からの距離を基準として検索をおこない、検索結果"
"を地図上に表示してくれるようなサービスが便利です。そのため、位置情報検索を高"
"速に実現できることが重要になっています。"

msgid ""
"Groonga provides inverted index-based fast geo-location search, which "
"supports a query to find points in a rectangle or circle. Groonga gives high "
"priority to points near the center of an area. Also, Groonga supports "
"distance measurement and you can sort points by distance from any point."
msgstr ""
"Groonga では転置索引を応用して高速な位置情報検索を実現しています。矩形・円に"
"よる範囲検索に対応しているほか、基準点の近くを優先的に探索させることができま"
"す。また、距離計算をサポートしているので、位置情報検索の結果を基準点からの距"
"離によって整列することも可能です。"

msgid "Groonga library"
msgstr "Groonga ライブラリ"

msgid ""
"The basic functions of Groonga are provided in a C library and any "
"application can use Groonga as a full text search engine or a column-"
"oriented database. Also, libraries for languages other than C/C++, such as "
"Ruby, are provided in related projects. See `related projects <http://"
"groonga.org/related-projects.html>`_ for details."
msgstr ""
"Groonga の基本機能は C ライブラリとして提供されているので、任意のアプリケー"
"ションに組み込んで利用することができます。C/C++ 以外については、Ruby から "
"Groonga を利用するライブラリなどが関連プロジェクトにおいて提供されています。"
"詳しくは `関連プロジェクト <http://groonga.org/ja/related-projects.html>`_ を"
"参照してください。"

msgid "Groonga server"
msgstr "Groonga サーバ"

msgid ""
"Groonga provides a built-in server command which supports HTTP, the "
"memcached binary protocol and the Groonga Query Transfer Protocol (:doc:`/"
"spec/gqtp`). Also, a Groonga server supports query caching, which "
"significantly reduces response time for repeated read queries. Using this "
"command, Groonga is available even on a server that does not allow you to "
"install new libraries."
msgstr ""
"Groonga にはサーバ機能があるため、レンタルサーバなどの新しいライブラリをイン"
"ストールできない環境においても利用できます。対応しているのは HTTP、memcached "
"binary プロトコル、およびGroongaの独自プロトコルであるGroonga Query Transfer "
"Protocol（ :doc:`/spec/gqtp` ）です。サーバとして利用するときはクエリのキャッ"
"シュ機能が有効になるため、同じクエリを受け取ったときは応答時間が短くなるとい"
"う特徴があります。"

msgid "Mroonga storage engine"
msgstr "Mroonga ストレージエンジン"

msgid ""
"Groonga works not only as an independent column-oriented DBMS but also as "
"storage engines of well-known DBMSs. For example, `Mroonga <http://mroonga."
"org/>`_ is a MySQL pluggable storage engine using Groonga. By using Mroonga, "
"you can use Groonga for column-oriented storage and full text search. A "
"combination of a built-in storage engine, MyISAM or InnoDB, and a Groonga-"
"based full text search engine is also available. All the combinations have "
"good and bad points and the best one depends on the application. See "
"`related projects <http://groonga.org/related-projects.html>`_ for details."
msgstr ""
"Groonga は独自のカラムストアを持つ列指向のデータベースとしての側面を持ってい"
"ますが、既存の RDBMS のストレージエンジンとして利用することもできます。たとえ"
"ば、Groonga をベースとする MySQL のストレージエンジンとして `Mroonga <http://"
"mroonga.org/ja/>`_ が開発されています。Mroonga は MySQL のプラグインとして動"
"的にロードすることが可能であり、Groonga のカラムストアをストレージとして利用"
"したり、全文検索エンジンとして Groonga を MyISAM や InnoDB と連携させたりする"
"ことができます。Groonga 単体での利用、および MyISAM, InnoDB との連携には一長"
"一短があるので、用途に応じて適切な組み合わせを選ぶことが大切です。詳しくは `"
"関連プロジェクト <http://groonga.org/ja/related-projects.html>`_ を参照してく"
"ださい。"
